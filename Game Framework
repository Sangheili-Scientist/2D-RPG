# Framework

import pygame
import time

x = pygame.init()
print(x)

# color = (R,G,B)

white = (255,255,255)
black = (0,0,0)
red = (255,0,0)

gameOver_message = "Game over, press C to play again or Q to quit"

display_width = 800
display_height = 600

gameDisplay = pygame.display.set_mode((display_width,display_height))

# pygame.display.flip() Updates entire screen in flipbook style movement
# pygame.display.update() Updates section of screen or entire screen if left blank (rendering flip useless)

pygame.display.set_caption('Wiggly Boi')

clock = pygame.time.Clock()

block_size = 10
FPS = 30

font = pygame.font.SysFont(None, 25)

def message_to_screen(msg,color):
	screen_text = font.render(msg, True, color)
	gameDisplay.blit(screen_text, [display_width/2, display_height/2])

def titleLoop():
	gamePlay = False
	gameExit = False
	lead_x = display_width/2
	lead_y = 2*display_height/3	
	lead_x_change = 0

	while not gameExit:

		while gamePlay == False:
			
			for event in pygame.event.get():
				if event.type == pygame.QUIT:
					gameExit = True
				if event.type == pygame.KEYDOWN:
					if event.key == pygame.K_LEFT:
						lead_x_change = -10
					if event.key == pygame.K_RIGHT:
						lead_x_change = 10
	
				if event.type == pygame.KEYUP:
					if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
						lead_x_change = 0
				if lead_x >= 100:
					gamePlay = True
				elif lead_x <= 400:
					gameExit = True
		gameDisplay.fill(black)
		gameDisplay.fill(red, rect=[300, 400, 80, 40])
		gameDisplay.fill(red, rect=[100, 400, 80, 40])
		message_to_screen('The Black', white)
		pygame.display.update()
time.sleep(10)
	
def gameLoop():
	gameExit = False
	gameOver = False
	lead_x = display_width/2
	lead_y = display_height/2
	lead_x_change = 0
	lead_y_change = 0

	while not gameExit:
		
		while gameOver == True:
			gameDisplay.fill(white)
			message_to_screen(gameOver_message, red)
			pygame.display.update()

			for event in pygame.event.get():
				if event.type == pygame.KEYDOWN:
					if event.key == pygame.K_q:
						gameExit = True
						gameOver = False
					if event.key == pygame.K_c:
						gameLoop()
		

		for event in pygame.event.get():
			print(event)
			if event.type == pygame.QUIT:
				gameExit = True
			if event.type == pygame.KEYDOWN:
				if event.key == pygame.K_LEFT:
					lead_x_change = -block_size
					lead_y_change = 0
				elif event.key == pygame.K_RIGHT:
					lead_x_change = block_size
					lead_y_change = 0
				elif event.key == pygame.K_UP:
					lead_y_change = -block_size
					lead_x_change = 0
				elif event.key == pygame.K_DOWN:
					lead_y_change = block_size
					lead_x_change = 0
			if event.type == pygame.KEYUP:
				if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
					lead_x_change = 0
				if event.key == pygame.K_UP or event.key == pygame.K_DOWN:
					lead_y_change = 0
	
		if lead_x >= display_width or lead_x < 0 or lead_y >= display_height or lead_y < 0:
			gameOver = True

			# if event.type == pygame.KEYUP:
				# if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
					# lead_x_change = 0
		lead_x += lead_x_change
		lead_y += lead_y_change

	
			
		gameDisplay.fill(white)
		pygame.draw.rect(gameDisplay, black, [lead_x,lead_y,block_size,block_size])
		# gameDisplay.fill(red, rect=[200,200,50,50]) This is another way to draw shapes using fill
		pygame.display.update()
	
		clock.tick(FPS)
	
	# message_to_screen("You Lose", red)
	# pygame.display.update()
	# time.sleep(2)	
	pygame.quit()
	quit()

gameLoop()

	# Sprites = image is placed on surface
	# Drawn = draw shapes with coordinates
